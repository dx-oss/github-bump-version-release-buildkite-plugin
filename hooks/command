#!/bin/bash

# https://buildkite.com/docs/pipelines/writing-build-scripts
set -euo pipefail

#
# common
#

docker=${BUILDKITE_PLUGIN_GITHUB_BUMP_VERSION_RELEASE_DOCKER:-docker}
debug=${BUILDKITE_PLUGIN_GITHUB_BUMP_VERSION_RELEASE_DEBUG:-0}
if [ $debug -gt 0 ]; then
    set -euox pipefail

    env
    $docker version
    $docker ps
    whoami
    pwd
    git tag   
fi

dotnet=${BUILDKITE_PLUGIN_GITHUB_BUMP_VERSION_RELEASE_DOTNET:-dotnet}
github_release=${BUILDKITE_PLUGIN_GITHUB_BUMP_VERSION_RELEASE_RELEASE:-github-release}
buildkite_agent=${BUILDKITE_PLUGIN_GITHUB_BUMP_VERSION_RELEASE_AGENT:-buildkite-agent}
image="dxdx/docker-builder-dotnet:2.2"
image=${BUILDKITE_PLUGIN_GITHUB_BUMP_VERSION_RELEASE_IMAGE:-$image}

branch=${BUILDKITE_PLUGIN_GITHUB_BUMP_VERSION_RELEASE_BRANCH:-master}
branch=${BUILDKITE_PIPELINE_DEFAULT_BRANCH:-$branch}

pull=${BUILDKITE_PLUGIN_GITHUB_BUMP_VERSION_RELEASE_PULL:-1}
if [ $pull -gt 0 ]; then
    $docker pull $image
fi
prefix=${BUILDKITE_PLUGIN_GITHUB_BUMP_VERSION_RELEASE_PREFIX:-""}

#
# version
#

# fetch version from git with gitVersion
function fetch_version() {
    local variable=$1
    local dotnet_args="--rm -it ${image} /gitversion/GitVersion.dll /output json /nofetch /showvariable ${variable}"
    local v=$($docker run -v $(pwd):/src -w /src --entrypoint dotnet ${dotnet_args} | sed 's/[^a-zA-Z0-9\.\-\_]//g')
    echo $v
}

# version - get version or bump
version_as_numbers=$(fetch_version MajorMinorPatch)
version="${version_as_numbers}"
git fetch -t
c=$(git tag | grep -c "${version}" || true)
if [ $c -gt 0 ]; then
    version_diff=$(git diff --stat $branch "${prefix}${version}" | wc -l || true)
    if [ $version_diff -gt 0 ]; then
        $buildkite_agent annotate --style info "Version ${version} allready exists as tag, so it will be bumped"
        ma=$(echo ${version_as_numbers} | cut -f1 -d".")
        mi=$(echo ${version_as_numbers} | cut -f2 -d".")
        mp=$(echo ${version_as_numbers} | cut -f3 -d".")
        mp=$((mp + 1))
        version="${ma}.${mi}.${mp}"
    else
        $buildkite_agent annotate --style info "Version ${version} allready exists (skip push)"
        exit 0
    fi
else
    version=$(fetch_version SemVer)
fi

if [ "$version" = "" ]; then
    $buildkite_agent annotate --style error "Cannot get any version"

    exit 1
fi

if [ "$prefix" != "" ]; then
    prefix_check=$(echo "${version}" | grep -c "^${prefix}" || true)
    if [ $prefix_check -eq 0 ]; then
        version="${prefix}${version}"
    fi
fi

export VERSION=$version
echo $version

$buildkite_agent meta-data set version $version
$buildkite_agent annotate --style info "Using [$image] with GitVersion and SemVer"
$buildkite_agent annotate --style success "Bump to version ${version}"

#
# release
#

if [ "$GITHUB_TOKEN" = "" ]; then
    echo "GITHUB_TOKEN token is not set"

    $buildkite_agent annotate --style error "Cannot release version ${version} with GITHUB_TOKEN is not set"

    exit 1
fi

dry=${BUILDKITE_PLUGIN_GITHUB_BUMP_VERSION_RELEASE_DRY:-0}
if [ $dry -gt 0 ]; then
    $buildkite_agent annotate --style success "Push release ${version} (dry-run)"
else
    export GITHUB_USER=$(echo "$BUILDKITE_REPO" | cut -d: -f 2 | cut -d/ -f 1)
    export GITHUB_REPO=$(echo "$BUILDKITE_REPO" | cut -d: -f 2 | cut -d/ -f 2 | cut -d. -f 1)

    # TODO: use https://github.com/github-release/github-release instead when it support default github description behaviour
    # $docker run -e "GITHUB_USER=$GITHUB_USER" -e "GITHUB_REPO=$GITHUB_REPO" -e "GITHUB_TOKEN=$GITHUB_TOKEN" -v $(pwd):/src -w /src --entrypoint $github_release --rm -it $image release -t "${version}"

    release_payload=$(printf '{"tag_name": "%s","name": "%s","draft": false,"prerelease": false}' $version $version)
    curl -f -q -H "Authorization: token $GITHUB_TOKEN" --data "$release_payload" https://api.github.com/repos/$GITHUB_USER/$GITHUB_REPO/releases
    
    $buildkite_agent annotate --style success "Push release ${version}"
fi
